#include <MatrixHardware_ESP32_V0.h>
#include <SmartMatrix.h>

#include <FontMaker.h>

#define COLOR_DEPTH  8
const uint16_t kMatrixWidth = 192;
const uint16_t kMatrixHeight = 64;
const uint8_t kRefreshDepth = 24;       // Tradeoff of color quality vs refresh rate, max brightness, and RAM usage.  36 is typically good, drop down to 24 if you need to.  On Teensy, multiples of 3, up to 48: 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48.  On ESP32: 24, 36, 48
const uint8_t kDmaBufferRows = 2;       // known working: 2-4, use 2 to save RAM, more to keep from dropping frames and automatically lowering refresh rate.  (This isn't used on ESP32, leave as default)
const uint8_t kPanelType = SMARTMATRIX_HUB75_32ROW_64COL_MOD8SCAN;
//const uint32_t kMatrixOptions = (SM_HUB75_OPTIONS_MATRIXCALC_LOWPRIORITY|SM_HUB75_OPTIONS_ESP32_CALC_TASK_CORE_1);        // see docs for options: https://github.com/pixelmatix/SmartMatrix/wiki
const uint32_t kMatrixOptions = (SM_HUB75_OPTIONS_NONE);        // see docs for options: https://github.com/pixelmatix/SmartMatrix/wiki
const uint8_t kBackgroundLayerOptions = (SM_BACKGROUND_OPTIONS_NONE);
const uint8_t kScrollingLayerOptions = (SM_SCROLLING_OPTIONS_NONE);

SMARTMATRIX_ALLOCATE_BUFFERS(matrix, kMatrixWidth, kMatrixHeight, kRefreshDepth, kDmaBufferRows, kPanelType, kMatrixOptions);
SMARTMATRIX_ALLOCATE_BACKGROUND_LAYER(backgroundLayer, kMatrixWidth, kMatrixHeight, COLOR_DEPTH, kBackgroundLayerOptions);
SMARTMATRIX_ALLOCATE_VN_SCROLLING_LAYER(scrollingLayer, kMatrixWidth, kMatrixHeight, COLOR_DEPTH, kScrollingLayerOptions);

const int defaultBrightness = 255;        // full (100%) brightness
const rgb8 defaultBackgroundColor(0, 0, 0);

rgb8 mauC[4] = {{0, 5, 0}, {5, 5, 0}, {0, 1, 3}, {5, 0, 0}};

void setPX(int16_t x, int16_t y, uint16_t color)
{
  rgb8 colorRGB;
  colorRGB.rgb = color;
  backgroundLayer.drawPixel(x, y, colorRGB);
}

MakeFont makeFont(&setPX);

void setup() {
  Serial.begin(115200);
  makeFont.setFont(&VNFontTypeTahoma);
  
  matrix.addLayer(&backgroundLayer);
 matrix.addLayer(&scrollingLayer);
  matrix.begin();
  matrix.setBrightness(defaultBrightness);

  backgroundLayer.enableColorCorrection(false);
 scrollingLayer.enableColorCorrection(false);

  backgroundLayer.fillScreen(defaultBackgroundColor);

  // backgroundLayer.setFont(font8x13);
//  backgroundLayer.drawString((192 - 22 * 8) / 2, 4, mauT, "BUS INFORMATION ONLINE");


  //  backgroundLayer.setFont(font6x10);
  //  backgroundLayer.drawString(5, 20, mauC[0], "ROUTE");
  //  backgroundLayer.drawString(5, 34, mauC[0], "MINUTES");
  //  backgroundLayer.drawString(5, 48, mauC[0], "KMS");

//  rgb8 colorTemp = {7,7,0};
//  makeFont.print_noBackColor(4, 49,"Chúc mừng Năm mới 2021", colorTemp.rgb);
//  backgroundLayer.swapBuffers();

// scrollingLayer.setOffsetFromTop(6);
//
// scrollingLayer.setColor({7,7,3});
// scrollingLayer.setMode(wrapForward);
// scrollingLayer.setSpeed(40);
// scrollingLayer.start("Kỹ kĩ kị KỴ kỵ KỊ", 16);

  scrollVinBusTitle();
  backgroundLayer.swapBuffers();
}
//std::vector<Line<rgb8,kBackgroundLayerOptions>> list;
void loop() {

}

//void testFoo(){
//  Line<rgb8,kBackgroundLayerOptions> screen;
//  screen.attach(STRIP_3, &backgroundLayer, &makeFont);
//  screen.setMargin(CENTER);
//  list.push_back(screen);
//}

void db(String label, String val){
  Serial.print(label);
  Serial.print(": ");
  Serial.println(val);
}

void scrollVinBusTitle(){
  makeFont.print_noBackColor(0,0,"VinBus",mauC[3].rgb);

//  scrollingLayer.setOffsetFromTop(0);
  scrollingLayer.setStartOffsetFromLeft(48);
  scrollingLayer.setColor({0,6,2});
  scrollingLayer.setMode(wrapForward);
  scrollingLayer.setSpeed(40);
  scrollingLayer.start("Hello xin chào các bạn, chúc vui chúc vui nhé bạn ơi!", 5);
}
